"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Formatter = void 0;
const code_frame_1 = require("@babel/code-frame");
const chalk_1 = __importDefault(require("chalk"));
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const Matchers_1 = require("./Matchers");
const Parser_1 = require("./Parser");
const switchRegex_1 = require("./switchRegex");
const symbols_1 = require("./utils/symbols");
var Status;
(function (Status) {
    Status["Pass"] = "pass";
    Status["Fail"] = "fail";
    Status["Pending"] = "pending";
    Status["Error"] = "error";
    Status["Completion"] = "completion";
    Status["Measure"] = "measure";
})(Status || (Status = {}));
function highlightLastPathComponent(filePath) {
    return chalk_1.default.dim(path.dirname(filePath) + '/') + path.basename(filePath);
}
function format(command, argumentText = '', success = true) {
    const symbol = statusSymbol(success ? Status.Completion : Status.Fail);
    return [symbol, chalk_1.default.bold(command), argumentText].join(' ').trim();
}
function formatTest(testCase, status) {
    return [statusSymbol(status), testCase].join(' ').trim();
}
function heading(prefix, text, description) {
    return [prefix, chalk_1.default.white(text), description].join(' ').trim();
}
function statusSymbol(status) {
    switch (status) {
        case Status.Pass:
            return chalk_1.default.green(symbols_1.PASS);
        case Status.Fail:
            return chalk_1.default.red(symbols_1.FAIL);
        case Status.Pending:
            return chalk_1.default.cyan(symbols_1.PENDING);
        case Status.Error:
            return chalk_1.default.red(symbols_1.ERROR);
        case Status.Completion:
            return chalk_1.default.white(symbols_1.COMPLETION);
        case Status.Measure:
            return chalk_1.default.magenta(symbols_1.MEASURE);
        default:
            return '';
    }
}
function coloredTime(time) {
    const flt = parseFloat(time);
    if (flt >= 0 && flt <= 0.025) {
        return time;
    }
    else if (flt >= 0.026 && flt <= 0.1) {
        return chalk_1.default.yellow(time);
    }
    return chalk_1.default.red(time);
}
function capitalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function relativePath(projectRoot, filePath) {
    return slash(path.relative(projectRoot, filePath));
}
function formatBreadCrumb(fileName, target, project) {
    // TODO: Simplify
    return [project === target ? project : [project, target].filter(Boolean).join(`/`), fileName]
        .filter(Boolean)
        .join(` ${symbols_1.BREADCRUMB} `);
}
function getAppRoot(filePath) {
    let appRoot = filePath;
    const isBuildFolder = (path) => /((Debug|Release)-[^/\s\d]*$)|(.app$)/.test(path);
    while (!isBuildFolder(appRoot) && appRoot.length > 1) {
        appRoot = path.dirname(appRoot);
    }
    return isBuildFolder(appRoot) ? appRoot : '';
}
class Formatter {
    constructor(props) {
        this.props = props;
        this.errors = [];
        this.warnings = [];
    }
    get parser() {
        if (this._parser) {
            return this._parser;
        }
        this._parser = new Parser_1.Parser(this);
        return this._parser;
    }
    pipe(data) {
        const lines = [];
        data.split(os.EOL).forEach(line => {
            const results = this.parser.parse(line);
            if (typeof results === 'string' && results.trim()) {
                lines.push(results);
            }
        });
        this.checkForBundlingErrors(lines);
        return lines;
    }
    dimConfiguration(configuration) {
        return chalk_1.default.dim(`(${configuration})`);
    }
    getTitleForConfigurationType(type) {
        switch (type) {
            case 'Clean':
                return 'Cleaning';
            case 'Aggregate':
                return 'Aggregate';
            case 'Analyze':
                return 'Analyzing';
            case 'Build':
                return 'Building';
            default:
                return 'Unknown';
        }
    }
    formatTarget(props) {
        return format(this.getTitleForConfigurationType(props.type), this.dimConfiguration(formatBreadCrumb(props.configuration, props.target, props.project)));
    }
    formatCopy({ from, to }) {
        const relativeFile = relativePath(this.props.projectRoot, from);
        const appFileRoot = getAppRoot(to);
        const relativeAppFile = relativePath(appFileRoot, to);
        return format('Copying  ', [relativeFile, relativeAppFile].join(' âžœ '));
    }
    getFileOperationTitle(type) {
        switch (type) {
            case 'Analyze':
                return 'Analyzing';
            case 'GenerateDSYMFile':
                return `Generating debug`;
            case 'Ld':
                return 'Linking  ';
            case 'Libtool':
                return 'Packaging';
            case 'ProcessPCH':
                return 'Precompiling';
            case 'ProcessInfoPlistFile':
                return 'Preparing';
            case 'CodeSign':
                return 'Signing  ';
            case 'Touch':
                return 'Creating ';
            case 'CompileC':
            case 'CompileSwift':
            case 'CompileXIB':
            case 'CompileStoryboard':
                return 'Compiling';
            default:
                // Unknown file operation
                return '';
        }
    }
    formatFileOperation(props) {
        const title = this.getFileOperationTitle(props.type);
        switch (props.type) {
            case 'Analyze':
                return format(title, formatBreadCrumb(props.fileName, props.target, props.project));
            case 'GenerateDSYMFile':
                return format(title, formatBreadCrumb(`'${props.fileName}'`, props.target, props.project));
            case 'Ld':
                return format(title, formatBreadCrumb(props.fileName, props.target, props.project));
            case 'Libtool':
                return format(title, formatBreadCrumb(props.fileName, props.target, props.project));
            case 'ProcessPCH':
                return format(title, formatBreadCrumb(props.fileName, props.target, props.project));
            case 'ProcessInfoPlistFile':
                return format(title, formatBreadCrumb(props.fileName, props.target, props.project));
            case 'CodeSign':
                return format(title, formatBreadCrumb(props.fileName, props.target, props.project));
            case 'Touch':
                return format(title, props.fileName);
            case 'CompileC':
            case